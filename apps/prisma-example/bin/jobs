#!/usr/bin/env node
const { promisify } = require('util');
const writeFile = promisify(require('fs').writeFile);
const path = require('path');

if (!process.env.NODE_ENV) process.env.NODE_ENV = 'development';

let JobScheduler;

if (['testing', 'production'].includes(process.env.NODE_ENV)) {
  JobScheduler = require('../lib').default;
} else {
  require('ts-node').register({ transpileOnly: true }); // or babel-register
  JobScheduler = require('../src').default;
}

process.title = 'jobs';

const start = async () => {
  try {
    await JobScheduler.runScheduledJobs();
    console.log('scheduled jobs are ready to publish messages...');
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
};

for (const signal of ['SIGTERM', 'SIGINT']) {
  process.on(signal, async () => {
    if (process.env.NODE_ENV === 'development') {
      process.exit();
    }
    console.log(`Received ${signal}, setting termination lock`);
    await writeFile(path.join(process.cwd(), 'termination.lock'), signal);
  });
}

start();
